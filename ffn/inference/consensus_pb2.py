# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: inference/consensus.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from utils import vector_pb2 as utils_dot_vector__pb2
from inference import inference_pb2 as inference_dot_inference__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='inference/consensus.proto',
  package='ffn',
  syntax='proto2',
  serialized_pb=_b('\n\x19inference/consensus.proto\x12\x03\x66\x66n\x1a\x12utils/vector.proto\x1a\x19inference/inference.proto\"\xf2\x02\n\x10\x43onsensusRequest\x12.\n\rsegmentation1\x18\x01 \x01(\x0b\x32\x17.ffn.SegmentationSource\x12.\n\rsegmentation2\x18\x02 \x01(\x0b\x32\x17.ffn.SegmentationSource\x12\x1f\n\x17segmentation_output_dir\x18\x03 \x01(\t\x12\x31\n\x04type\x18\x04 \x01(\x0e\x32#.ffn.ConsensusRequest.ConsensusType\x12\x19\n\x11\x65xternal_min_size\x18\x05 \x01(\x05\x12,\n\x0f\x65xternal_offset\x18\x06 \x01(\x0b\x32\x13.ffn.proto.Vector3j\x12\x16\n\x0esplit_min_size\x18\x07 \x01(\x05\"I\n\rConsensusType\x12#\n\x1f\x43ONSENSUS_EXTERNAL_CONNECTIVITY\x10\x01\x12\x13\n\x0f\x43ONSENSUS_SPLIT\x10\x02')
  ,
  dependencies=[utils_dot_vector__pb2.DESCRIPTOR,inference_dot_inference__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)



_CONSENSUSREQUEST_CONSENSUSTYPE = _descriptor.EnumDescriptor(
  name='ConsensusType',
  full_name='ffn.ConsensusRequest.ConsensusType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='CONSENSUS_EXTERNAL_CONNECTIVITY', index=0, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CONSENSUS_SPLIT', index=1, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=379,
  serialized_end=452,
)
_sym_db.RegisterEnumDescriptor(_CONSENSUSREQUEST_CONSENSUSTYPE)


_CONSENSUSREQUEST = _descriptor.Descriptor(
  name='ConsensusRequest',
  full_name='ffn.ConsensusRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='segmentation1', full_name='ffn.ConsensusRequest.segmentation1', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='segmentation2', full_name='ffn.ConsensusRequest.segmentation2', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='segmentation_output_dir', full_name='ffn.ConsensusRequest.segmentation_output_dir', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='type', full_name='ffn.ConsensusRequest.type', index=3,
      number=4, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='external_min_size', full_name='ffn.ConsensusRequest.external_min_size', index=4,
      number=5, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='external_offset', full_name='ffn.ConsensusRequest.external_offset', index=5,
      number=6, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='split_min_size', full_name='ffn.ConsensusRequest.split_min_size', index=6,
      number=7, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _CONSENSUSREQUEST_CONSENSUSTYPE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=82,
  serialized_end=452,
)

_CONSENSUSREQUEST.fields_by_name['segmentation1'].message_type = inference_dot_inference__pb2._SEGMENTATIONSOURCE
_CONSENSUSREQUEST.fields_by_name['segmentation2'].message_type = inference_dot_inference__pb2._SEGMENTATIONSOURCE
_CONSENSUSREQUEST.fields_by_name['type'].enum_type = _CONSENSUSREQUEST_CONSENSUSTYPE
_CONSENSUSREQUEST.fields_by_name['external_offset'].message_type = utils_dot_vector__pb2._VECTOR3J
_CONSENSUSREQUEST_CONSENSUSTYPE.containing_type = _CONSENSUSREQUEST
DESCRIPTOR.message_types_by_name['ConsensusRequest'] = _CONSENSUSREQUEST

ConsensusRequest = _reflection.GeneratedProtocolMessageType('ConsensusRequest', (_message.Message,), dict(
  DESCRIPTOR = _CONSENSUSREQUEST,
  __module__ = 'inference.consensus_pb2'
  # @@protoc_insertion_point(class_scope:ffn.ConsensusRequest)
  ))
_sym_db.RegisterMessage(ConsensusRequest)


# @@protoc_insertion_point(module_scope)
