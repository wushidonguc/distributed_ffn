# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: inference/inference.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from ffn.utils import vector_pb2 as utils_dot_vector__pb2
from ffn.utils import bounding_box_pb2 as utils_dot_bounding__box__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='inference/inference.proto',
  package='ffn',
  syntax='proto2',
  serialized_pb=_b('\n\x19inference/inference.proto\x12\x03\x66\x66n\x1a\x12utils/vector.proto\x1a\x18utils/bounding_box.proto\"\\\n\x0f\x44\x65\x63oratedVolume\x12\x11\n\x07volinfo\x18\x01 \x01(\tH\x00\x12\x0e\n\x04hdf5\x18\x03 \x01(\tH\x00\x12\x17\n\x0f\x64\x65\x63orator_specs\x18\x02 \x01(\tB\r\n\x0bvolume_path\"j\n\x11MaskChannelConfig\x12\x0f\n\x07\x63hannel\x18\x01 \x01(\x05\x12\x11\n\tmin_value\x18\x02 \x01(\x02\x12\x11\n\tmax_value\x18\x03 \x01(\x02\x12\x0e\n\x06values\x18\x05 \x03(\x04\x12\x0e\n\x06invert\x18\x04 \x01(\x08\"<\n\x10ImageMaskOptions\x12(\n\x08\x63hannels\x18\x01 \x03(\x0b\x32\x16.ffn.MaskChannelConfig\"a\n\x11VolumeMaskOptions\x12\"\n\x04mask\x18\x01 \x01(\x0b\x32\x14.ffn.DecoratedVolume\x12(\n\x08\x63hannels\x18\x02 \x03(\x0b\x32\x16.ffn.MaskChannelConfig\"1\n\x1b\x43oordinateExpressionOptions\x12\x12\n\nexpression\x18\x01 \x01(\t\"\xbb\x01\n\nMaskConfig\x12(\n\x06volume\x18\x01 \x01(\x0b\x32\x16.ffn.VolumeMaskOptionsH\x00\x12&\n\x05image\x18\x02 \x01(\x0b\x32\x15.ffn.ImageMaskOptionsH\x00\x12\x41\n\x15\x63oordinate_expression\x18\x03 \x01(\x0b\x32 .ffn.CoordinateExpressionOptionsH\x00\x12\x0e\n\x06invert\x18\x04 \x01(\x08\x42\x08\n\x06source\"-\n\x0bMaskConfigs\x12\x1e\n\x05masks\x18\x01 \x03(\x0b\x32\x0f.ffn.MaskConfig\"~\n\x12SegmentationSource\x12\x11\n\tdirectory\x18\x01 \x01(\t\x12\x11\n\tthreshold\x18\x02 \x01(\x02\x12\x10\n\x08split_cc\x18\x03 \x01(\x08\x12\x10\n\x08min_size\x18\x04 \x01(\x05\x12\x1e\n\x04mask\x18\x05 \x01(\x0b\x32\x10.ffn.MaskConfigs\"\xf8\x01\n\x10InferenceOptions\x12\x17\n\x0finit_activation\x18\x01 \x01(\x02\x12\x11\n\tpad_value\x18\x02 \x01(\x02\x12\x16\n\x0emove_threshold\x18\x03 \x01(\x02\x12\x1d\n\x15\x63onsistency_threshold\x18\x04 \x01(\x02\x12\x1c\n\x14\x64isco_seed_threshold\x18\x05 \x01(\x02\x12.\n\x11min_boundary_dist\x18\x06 \x01(\x0b\x32\x13.ffn.proto.Vector3j\x12\x19\n\x11segment_threshold\x18\x07 \x01(\x02\x12\x18\n\x10min_segment_size\x18\x08 \x01(\x05\"E\n\x15SelfPredictionOptions\x12\x11\n\tthreshold\x18\x01 \x01(\x02\x12\x19\n\x0eorig_threshold\x18\x02 \x01(\x02:\x01\x31\"\x97\x01\n\x10\x41lignmentOptions\x12;\n\x04type\x18\x01 \x01(\x0e\x32\x1f.ffn.AlignmentOptions.AlignType:\x0cNO_ALIGNMENT\x12\x10\n\x08save_raw\x18\x06 \x01(\x08\"4\n\tAlignType\x12\x15\n\x11UNKNOWN_ALIGNMENT\x10\x00\x12\x10\n\x0cNO_ALIGNMENT\x10\x01\"\xea\x06\n\x10InferenceRequest\x12#\n\x05image\x18\x18 \x01(\x0b\x32\x14.ffn.DecoratedVolume\x12\x12\n\nimage_mean\x18\x02 \x01(\x02\x12\x14\n\x0cimage_stddev\x18\x03 \x01(\x02\x12\x1b\n\x13reference_histogram\x18\x04 \x01(\t\x12(\n\x0fhistogram_masks\x18\x1a \x03(\x0b\x32\x0f.ffn.MaskConfig\x12\x1e\n\x05masks\x18\x05 \x03(\x0b\x32\x0f.ffn.MaskConfig\x12#\n\nseed_masks\x18\x1e \x03(\x0b\x32\x0f.ffn.MaskConfig\x12(\n\nshift_mask\x18\x06 \x01(\x0b\x32\x14.ffn.DecoratedVolume\x12(\n\x0eshift_mask_fov\x18\x16 \x01(\x0b\x32\x10.ffn.BoundingBox\x12\x18\n\x10shift_mask_scale\x18\x07 \x01(\x05\x12\x1c\n\x14shift_mask_threshold\x18\x08 \x01(\x05\x12\x1c\n\x14movement_policy_name\x18\t \x01(\t\x12\x1c\n\x14movement_policy_args\x18\n \x01(\t\x12\x12\n\nmodel_name\x18\x0b \x01(\t\x12\x12\n\nmodel_args\x18\x0c \x01(\t\x12\x1d\n\x15model_checkpoint_path\x18\r \x01(\t\x12\x15\n\nbatch_size\x18\x1b \x01(\x05:\x01\x31\x12\x1e\n\x13\x63oncurrent_requests\x18\x1c \x01(\x05:\x01\x31\x12\x30\n\x11inference_options\x18\x0e \x01(\x0b\x32\x15.ffn.InferenceOptions\x12\x1f\n\x17segmentation_output_dir\x18\x0f \x01(\t\x12\x1b\n\x13\x63heckpoint_interval\x18\x10 \x01(\x05\x12\x13\n\x0bseed_policy\x18\x11 \x01(\t\x12\x18\n\x10seed_policy_args\x18\x13 \x01(\t\x12\x33\n\x0fself_prediction\x18\x12 \x01(\x0b\x32\x1a.ffn.SelfPredictionOptions\x12\x30\n\x11\x61lignment_options\x18\x14 \x01(\x0b\x32\x15.ffn.AlignmentOptions\x12/\n\x11init_segmentation\x18\x19 \x01(\x0b\x32\x14.ffn.DecoratedVolume\"U\n\x13ResegmentationPoint\x12\x0c\n\x04id_a\x18\x01 \x01(\x04\x12\x0c\n\x04id_b\x18\x02 \x01(\x04\x12\"\n\x05point\x18\x03 \x01(\x0b\x32\x13.ffn.proto.Vector3j\"\xaa\x03\n\x15ResegmentationRequest\x12(\n\tinference\x18\x01 \x01(\x0b\x32\x15.ffn.InferenceRequest\x12(\n\x06points\x18\x02 \x03(\x0b\x32\x18.ffn.ResegmentationPoint\x12#\n\x06radius\x18\x05 \x01(\x0b\x32\x13.ffn.proto.Vector3j\x12\x18\n\x10output_directory\x18\x06 \x01(\t\x12\x15\n\rsubdir_digits\x18\x07 \x01(\x05\x12\x1a\n\x0fmax_retry_iters\x18\x08 \x01(\x05:\x01\x31\x12-\n\x10\x65xclusion_radius\x18\t \x01(\x0b\x32\x13.ffn.proto.Vector3j\x12\x32\n\x15init_exclusion_radius\x18\x0b \x01(\x0b\x32\x13.ffn.proto.Vector3j\x12!\n\x19segment_recovery_fraction\x18\n \x01(\x02\x12\x17\n\x0fterminate_early\x18\x0c \x01(\x08\x12,\n\x0f\x61nalysis_radius\x18\r \x01(\x0b\x32\x13.ffn.proto.Vector3j\"+\n\x0c\x43ounterValue\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\x03\"i\n\x0cTaskCounters\x12#\n\x08\x63ounters\x18\x01 \x03(\x0b\x32\x11.ffn.CounterValue\x12\"\n\x05point\x18\x02 \x01(\x0b\x32\x13.ffn.proto.Vector3j\x12\x10\n\x08\x66ilename\x18\x03 \x01(\t')
  ,
  dependencies=[utils_dot_vector__pb2.DESCRIPTOR,utils_dot_bounding__box__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)



_ALIGNMENTOPTIONS_ALIGNTYPE = _descriptor.EnumDescriptor(
  name='AlignType',
  full_name='ffn.AlignmentOptions.AlignType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='UNKNOWN_ALIGNMENT', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NO_ALIGNMENT', index=1, number=1,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=1281,
  serialized_end=1333,
)
_sym_db.RegisterEnumDescriptor(_ALIGNMENTOPTIONS_ALIGNTYPE)


_DECORATEDVOLUME = _descriptor.Descriptor(
  name='DecoratedVolume',
  full_name='ffn.DecoratedVolume',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='volinfo', full_name='ffn.DecoratedVolume.volinfo', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='hdf5', full_name='ffn.DecoratedVolume.hdf5', index=1,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='decorator_specs', full_name='ffn.DecoratedVolume.decorator_specs', index=2,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='volume_path', full_name='ffn.DecoratedVolume.volume_path',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=80,
  serialized_end=172,
)


_MASKCHANNELCONFIG = _descriptor.Descriptor(
  name='MaskChannelConfig',
  full_name='ffn.MaskChannelConfig',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='channel', full_name='ffn.MaskChannelConfig.channel', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='min_value', full_name='ffn.MaskChannelConfig.min_value', index=1,
      number=2, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='max_value', full_name='ffn.MaskChannelConfig.max_value', index=2,
      number=3, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='values', full_name='ffn.MaskChannelConfig.values', index=3,
      number=5, type=4, cpp_type=4, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='invert', full_name='ffn.MaskChannelConfig.invert', index=4,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=174,
  serialized_end=280,
)


_IMAGEMASKOPTIONS = _descriptor.Descriptor(
  name='ImageMaskOptions',
  full_name='ffn.ImageMaskOptions',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='channels', full_name='ffn.ImageMaskOptions.channels', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=282,
  serialized_end=342,
)


_VOLUMEMASKOPTIONS = _descriptor.Descriptor(
  name='VolumeMaskOptions',
  full_name='ffn.VolumeMaskOptions',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='mask', full_name='ffn.VolumeMaskOptions.mask', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='channels', full_name='ffn.VolumeMaskOptions.channels', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=344,
  serialized_end=441,
)


_COORDINATEEXPRESSIONOPTIONS = _descriptor.Descriptor(
  name='CoordinateExpressionOptions',
  full_name='ffn.CoordinateExpressionOptions',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='expression', full_name='ffn.CoordinateExpressionOptions.expression', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=443,
  serialized_end=492,
)


_MASKCONFIG = _descriptor.Descriptor(
  name='MaskConfig',
  full_name='ffn.MaskConfig',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='volume', full_name='ffn.MaskConfig.volume', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='image', full_name='ffn.MaskConfig.image', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='coordinate_expression', full_name='ffn.MaskConfig.coordinate_expression', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='invert', full_name='ffn.MaskConfig.invert', index=3,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='source', full_name='ffn.MaskConfig.source',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=495,
  serialized_end=682,
)


_MASKCONFIGS = _descriptor.Descriptor(
  name='MaskConfigs',
  full_name='ffn.MaskConfigs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='masks', full_name='ffn.MaskConfigs.masks', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=684,
  serialized_end=729,
)


_SEGMENTATIONSOURCE = _descriptor.Descriptor(
  name='SegmentationSource',
  full_name='ffn.SegmentationSource',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='directory', full_name='ffn.SegmentationSource.directory', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='threshold', full_name='ffn.SegmentationSource.threshold', index=1,
      number=2, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='split_cc', full_name='ffn.SegmentationSource.split_cc', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='min_size', full_name='ffn.SegmentationSource.min_size', index=3,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='mask', full_name='ffn.SegmentationSource.mask', index=4,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=731,
  serialized_end=857,
)


_INFERENCEOPTIONS = _descriptor.Descriptor(
  name='InferenceOptions',
  full_name='ffn.InferenceOptions',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='init_activation', full_name='ffn.InferenceOptions.init_activation', index=0,
      number=1, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='pad_value', full_name='ffn.InferenceOptions.pad_value', index=1,
      number=2, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='move_threshold', full_name='ffn.InferenceOptions.move_threshold', index=2,
      number=3, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='consistency_threshold', full_name='ffn.InferenceOptions.consistency_threshold', index=3,
      number=4, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='disco_seed_threshold', full_name='ffn.InferenceOptions.disco_seed_threshold', index=4,
      number=5, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='min_boundary_dist', full_name='ffn.InferenceOptions.min_boundary_dist', index=5,
      number=6, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='segment_threshold', full_name='ffn.InferenceOptions.segment_threshold', index=6,
      number=7, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='min_segment_size', full_name='ffn.InferenceOptions.min_segment_size', index=7,
      number=8, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=860,
  serialized_end=1108,
)


_SELFPREDICTIONOPTIONS = _descriptor.Descriptor(
  name='SelfPredictionOptions',
  full_name='ffn.SelfPredictionOptions',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='threshold', full_name='ffn.SelfPredictionOptions.threshold', index=0,
      number=1, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='orig_threshold', full_name='ffn.SelfPredictionOptions.orig_threshold', index=1,
      number=2, type=2, cpp_type=6, label=1,
      has_default_value=True, default_value=float(1),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1110,
  serialized_end=1179,
)


_ALIGNMENTOPTIONS = _descriptor.Descriptor(
  name='AlignmentOptions',
  full_name='ffn.AlignmentOptions',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='type', full_name='ffn.AlignmentOptions.type', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=True, default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='save_raw', full_name='ffn.AlignmentOptions.save_raw', index=1,
      number=6, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _ALIGNMENTOPTIONS_ALIGNTYPE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1182,
  serialized_end=1333,
)


_INFERENCEREQUEST = _descriptor.Descriptor(
  name='InferenceRequest',
  full_name='ffn.InferenceRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='image', full_name='ffn.InferenceRequest.image', index=0,
      number=24, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='image_mean', full_name='ffn.InferenceRequest.image_mean', index=1,
      number=2, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='image_stddev', full_name='ffn.InferenceRequest.image_stddev', index=2,
      number=3, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='reference_histogram', full_name='ffn.InferenceRequest.reference_histogram', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='histogram_masks', full_name='ffn.InferenceRequest.histogram_masks', index=4,
      number=26, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='masks', full_name='ffn.InferenceRequest.masks', index=5,
      number=5, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='seed_masks', full_name='ffn.InferenceRequest.seed_masks', index=6,
      number=30, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='shift_mask', full_name='ffn.InferenceRequest.shift_mask', index=7,
      number=6, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='shift_mask_fov', full_name='ffn.InferenceRequest.shift_mask_fov', index=8,
      number=22, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='shift_mask_scale', full_name='ffn.InferenceRequest.shift_mask_scale', index=9,
      number=7, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='shift_mask_threshold', full_name='ffn.InferenceRequest.shift_mask_threshold', index=10,
      number=8, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='movement_policy_name', full_name='ffn.InferenceRequest.movement_policy_name', index=11,
      number=9, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='movement_policy_args', full_name='ffn.InferenceRequest.movement_policy_args', index=12,
      number=10, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='model_name', full_name='ffn.InferenceRequest.model_name', index=13,
      number=11, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='model_args', full_name='ffn.InferenceRequest.model_args', index=14,
      number=12, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='model_checkpoint_path', full_name='ffn.InferenceRequest.model_checkpoint_path', index=15,
      number=13, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='batch_size', full_name='ffn.InferenceRequest.batch_size', index=16,
      number=27, type=5, cpp_type=1, label=1,
      has_default_value=True, default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='concurrent_requests', full_name='ffn.InferenceRequest.concurrent_requests', index=17,
      number=28, type=5, cpp_type=1, label=1,
      has_default_value=True, default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='inference_options', full_name='ffn.InferenceRequest.inference_options', index=18,
      number=14, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='segmentation_output_dir', full_name='ffn.InferenceRequest.segmentation_output_dir', index=19,
      number=15, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='checkpoint_interval', full_name='ffn.InferenceRequest.checkpoint_interval', index=20,
      number=16, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='seed_policy', full_name='ffn.InferenceRequest.seed_policy', index=21,
      number=17, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='seed_policy_args', full_name='ffn.InferenceRequest.seed_policy_args', index=22,
      number=19, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='self_prediction', full_name='ffn.InferenceRequest.self_prediction', index=23,
      number=18, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='alignment_options', full_name='ffn.InferenceRequest.alignment_options', index=24,
      number=20, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='init_segmentation', full_name='ffn.InferenceRequest.init_segmentation', index=25,
      number=25, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1336,
  serialized_end=2210,
)


_RESEGMENTATIONPOINT = _descriptor.Descriptor(
  name='ResegmentationPoint',
  full_name='ffn.ResegmentationPoint',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id_a', full_name='ffn.ResegmentationPoint.id_a', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='id_b', full_name='ffn.ResegmentationPoint.id_b', index=1,
      number=2, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='point', full_name='ffn.ResegmentationPoint.point', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2212,
  serialized_end=2297,
)


_RESEGMENTATIONREQUEST = _descriptor.Descriptor(
  name='ResegmentationRequest',
  full_name='ffn.ResegmentationRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='inference', full_name='ffn.ResegmentationRequest.inference', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='points', full_name='ffn.ResegmentationRequest.points', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='radius', full_name='ffn.ResegmentationRequest.radius', index=2,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='output_directory', full_name='ffn.ResegmentationRequest.output_directory', index=3,
      number=6, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='subdir_digits', full_name='ffn.ResegmentationRequest.subdir_digits', index=4,
      number=7, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='max_retry_iters', full_name='ffn.ResegmentationRequest.max_retry_iters', index=5,
      number=8, type=5, cpp_type=1, label=1,
      has_default_value=True, default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='exclusion_radius', full_name='ffn.ResegmentationRequest.exclusion_radius', index=6,
      number=9, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='init_exclusion_radius', full_name='ffn.ResegmentationRequest.init_exclusion_radius', index=7,
      number=11, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='segment_recovery_fraction', full_name='ffn.ResegmentationRequest.segment_recovery_fraction', index=8,
      number=10, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='terminate_early', full_name='ffn.ResegmentationRequest.terminate_early', index=9,
      number=12, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='analysis_radius', full_name='ffn.ResegmentationRequest.analysis_radius', index=10,
      number=13, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2300,
  serialized_end=2726,
)


_COUNTERVALUE = _descriptor.Descriptor(
  name='CounterValue',
  full_name='ffn.CounterValue',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='ffn.CounterValue.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='ffn.CounterValue.value', index=1,
      number=2, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2728,
  serialized_end=2771,
)


_TASKCOUNTERS = _descriptor.Descriptor(
  name='TaskCounters',
  full_name='ffn.TaskCounters',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='counters', full_name='ffn.TaskCounters.counters', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='point', full_name='ffn.TaskCounters.point', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='filename', full_name='ffn.TaskCounters.filename', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2773,
  serialized_end=2878,
)

_DECORATEDVOLUME.oneofs_by_name['volume_path'].fields.append(
  _DECORATEDVOLUME.fields_by_name['volinfo'])
_DECORATEDVOLUME.fields_by_name['volinfo'].containing_oneof = _DECORATEDVOLUME.oneofs_by_name['volume_path']
_DECORATEDVOLUME.oneofs_by_name['volume_path'].fields.append(
  _DECORATEDVOLUME.fields_by_name['hdf5'])
_DECORATEDVOLUME.fields_by_name['hdf5'].containing_oneof = _DECORATEDVOLUME.oneofs_by_name['volume_path']
_IMAGEMASKOPTIONS.fields_by_name['channels'].message_type = _MASKCHANNELCONFIG
_VOLUMEMASKOPTIONS.fields_by_name['mask'].message_type = _DECORATEDVOLUME
_VOLUMEMASKOPTIONS.fields_by_name['channels'].message_type = _MASKCHANNELCONFIG
_MASKCONFIG.fields_by_name['volume'].message_type = _VOLUMEMASKOPTIONS
_MASKCONFIG.fields_by_name['image'].message_type = _IMAGEMASKOPTIONS
_MASKCONFIG.fields_by_name['coordinate_expression'].message_type = _COORDINATEEXPRESSIONOPTIONS
_MASKCONFIG.oneofs_by_name['source'].fields.append(
  _MASKCONFIG.fields_by_name['volume'])
_MASKCONFIG.fields_by_name['volume'].containing_oneof = _MASKCONFIG.oneofs_by_name['source']
_MASKCONFIG.oneofs_by_name['source'].fields.append(
  _MASKCONFIG.fields_by_name['image'])
_MASKCONFIG.fields_by_name['image'].containing_oneof = _MASKCONFIG.oneofs_by_name['source']
_MASKCONFIG.oneofs_by_name['source'].fields.append(
  _MASKCONFIG.fields_by_name['coordinate_expression'])
_MASKCONFIG.fields_by_name['coordinate_expression'].containing_oneof = _MASKCONFIG.oneofs_by_name['source']
_MASKCONFIGS.fields_by_name['masks'].message_type = _MASKCONFIG
_SEGMENTATIONSOURCE.fields_by_name['mask'].message_type = _MASKCONFIGS
_INFERENCEOPTIONS.fields_by_name['min_boundary_dist'].message_type = utils_dot_vector__pb2._VECTOR3J
_ALIGNMENTOPTIONS.fields_by_name['type'].enum_type = _ALIGNMENTOPTIONS_ALIGNTYPE
_ALIGNMENTOPTIONS_ALIGNTYPE.containing_type = _ALIGNMENTOPTIONS
_INFERENCEREQUEST.fields_by_name['image'].message_type = _DECORATEDVOLUME
_INFERENCEREQUEST.fields_by_name['histogram_masks'].message_type = _MASKCONFIG
_INFERENCEREQUEST.fields_by_name['masks'].message_type = _MASKCONFIG
_INFERENCEREQUEST.fields_by_name['seed_masks'].message_type = _MASKCONFIG
_INFERENCEREQUEST.fields_by_name['shift_mask'].message_type = _DECORATEDVOLUME
_INFERENCEREQUEST.fields_by_name['shift_mask_fov'].message_type = utils_dot_bounding__box__pb2._BOUNDINGBOX
_INFERENCEREQUEST.fields_by_name['inference_options'].message_type = _INFERENCEOPTIONS
_INFERENCEREQUEST.fields_by_name['self_prediction'].message_type = _SELFPREDICTIONOPTIONS
_INFERENCEREQUEST.fields_by_name['alignment_options'].message_type = _ALIGNMENTOPTIONS
_INFERENCEREQUEST.fields_by_name['init_segmentation'].message_type = _DECORATEDVOLUME
_RESEGMENTATIONPOINT.fields_by_name['point'].message_type = utils_dot_vector__pb2._VECTOR3J
_RESEGMENTATIONREQUEST.fields_by_name['inference'].message_type = _INFERENCEREQUEST
_RESEGMENTATIONREQUEST.fields_by_name['points'].message_type = _RESEGMENTATIONPOINT
_RESEGMENTATIONREQUEST.fields_by_name['radius'].message_type = utils_dot_vector__pb2._VECTOR3J
_RESEGMENTATIONREQUEST.fields_by_name['exclusion_radius'].message_type = utils_dot_vector__pb2._VECTOR3J
_RESEGMENTATIONREQUEST.fields_by_name['init_exclusion_radius'].message_type = utils_dot_vector__pb2._VECTOR3J
_RESEGMENTATIONREQUEST.fields_by_name['analysis_radius'].message_type = utils_dot_vector__pb2._VECTOR3J
_TASKCOUNTERS.fields_by_name['counters'].message_type = _COUNTERVALUE
_TASKCOUNTERS.fields_by_name['point'].message_type = utils_dot_vector__pb2._VECTOR3J
DESCRIPTOR.message_types_by_name['DecoratedVolume'] = _DECORATEDVOLUME
DESCRIPTOR.message_types_by_name['MaskChannelConfig'] = _MASKCHANNELCONFIG
DESCRIPTOR.message_types_by_name['ImageMaskOptions'] = _IMAGEMASKOPTIONS
DESCRIPTOR.message_types_by_name['VolumeMaskOptions'] = _VOLUMEMASKOPTIONS
DESCRIPTOR.message_types_by_name['CoordinateExpressionOptions'] = _COORDINATEEXPRESSIONOPTIONS
DESCRIPTOR.message_types_by_name['MaskConfig'] = _MASKCONFIG
DESCRIPTOR.message_types_by_name['MaskConfigs'] = _MASKCONFIGS
DESCRIPTOR.message_types_by_name['SegmentationSource'] = _SEGMENTATIONSOURCE
DESCRIPTOR.message_types_by_name['InferenceOptions'] = _INFERENCEOPTIONS
DESCRIPTOR.message_types_by_name['SelfPredictionOptions'] = _SELFPREDICTIONOPTIONS
DESCRIPTOR.message_types_by_name['AlignmentOptions'] = _ALIGNMENTOPTIONS
DESCRIPTOR.message_types_by_name['InferenceRequest'] = _INFERENCEREQUEST
DESCRIPTOR.message_types_by_name['ResegmentationPoint'] = _RESEGMENTATIONPOINT
DESCRIPTOR.message_types_by_name['ResegmentationRequest'] = _RESEGMENTATIONREQUEST
DESCRIPTOR.message_types_by_name['CounterValue'] = _COUNTERVALUE
DESCRIPTOR.message_types_by_name['TaskCounters'] = _TASKCOUNTERS

DecoratedVolume = _reflection.GeneratedProtocolMessageType('DecoratedVolume', (_message.Message,), dict(
  DESCRIPTOR = _DECORATEDVOLUME,
  __module__ = 'inference.inference_pb2'
  # @@protoc_insertion_point(class_scope:ffn.DecoratedVolume)
  ))
_sym_db.RegisterMessage(DecoratedVolume)

MaskChannelConfig = _reflection.GeneratedProtocolMessageType('MaskChannelConfig', (_message.Message,), dict(
  DESCRIPTOR = _MASKCHANNELCONFIG,
  __module__ = 'inference.inference_pb2'
  # @@protoc_insertion_point(class_scope:ffn.MaskChannelConfig)
  ))
_sym_db.RegisterMessage(MaskChannelConfig)

ImageMaskOptions = _reflection.GeneratedProtocolMessageType('ImageMaskOptions', (_message.Message,), dict(
  DESCRIPTOR = _IMAGEMASKOPTIONS,
  __module__ = 'inference.inference_pb2'
  # @@protoc_insertion_point(class_scope:ffn.ImageMaskOptions)
  ))
_sym_db.RegisterMessage(ImageMaskOptions)

VolumeMaskOptions = _reflection.GeneratedProtocolMessageType('VolumeMaskOptions', (_message.Message,), dict(
  DESCRIPTOR = _VOLUMEMASKOPTIONS,
  __module__ = 'inference.inference_pb2'
  # @@protoc_insertion_point(class_scope:ffn.VolumeMaskOptions)
  ))
_sym_db.RegisterMessage(VolumeMaskOptions)

CoordinateExpressionOptions = _reflection.GeneratedProtocolMessageType('CoordinateExpressionOptions', (_message.Message,), dict(
  DESCRIPTOR = _COORDINATEEXPRESSIONOPTIONS,
  __module__ = 'inference.inference_pb2'
  # @@protoc_insertion_point(class_scope:ffn.CoordinateExpressionOptions)
  ))
_sym_db.RegisterMessage(CoordinateExpressionOptions)

MaskConfig = _reflection.GeneratedProtocolMessageType('MaskConfig', (_message.Message,), dict(
  DESCRIPTOR = _MASKCONFIG,
  __module__ = 'inference.inference_pb2'
  # @@protoc_insertion_point(class_scope:ffn.MaskConfig)
  ))
_sym_db.RegisterMessage(MaskConfig)

MaskConfigs = _reflection.GeneratedProtocolMessageType('MaskConfigs', (_message.Message,), dict(
  DESCRIPTOR = _MASKCONFIGS,
  __module__ = 'inference.inference_pb2'
  # @@protoc_insertion_point(class_scope:ffn.MaskConfigs)
  ))
_sym_db.RegisterMessage(MaskConfigs)

SegmentationSource = _reflection.GeneratedProtocolMessageType('SegmentationSource', (_message.Message,), dict(
  DESCRIPTOR = _SEGMENTATIONSOURCE,
  __module__ = 'inference.inference_pb2'
  # @@protoc_insertion_point(class_scope:ffn.SegmentationSource)
  ))
_sym_db.RegisterMessage(SegmentationSource)

InferenceOptions = _reflection.GeneratedProtocolMessageType('InferenceOptions', (_message.Message,), dict(
  DESCRIPTOR = _INFERENCEOPTIONS,
  __module__ = 'inference.inference_pb2'
  # @@protoc_insertion_point(class_scope:ffn.InferenceOptions)
  ))
_sym_db.RegisterMessage(InferenceOptions)

SelfPredictionOptions = _reflection.GeneratedProtocolMessageType('SelfPredictionOptions', (_message.Message,), dict(
  DESCRIPTOR = _SELFPREDICTIONOPTIONS,
  __module__ = 'inference.inference_pb2'
  # @@protoc_insertion_point(class_scope:ffn.SelfPredictionOptions)
  ))
_sym_db.RegisterMessage(SelfPredictionOptions)

AlignmentOptions = _reflection.GeneratedProtocolMessageType('AlignmentOptions', (_message.Message,), dict(
  DESCRIPTOR = _ALIGNMENTOPTIONS,
  __module__ = 'inference.inference_pb2'
  # @@protoc_insertion_point(class_scope:ffn.AlignmentOptions)
  ))
_sym_db.RegisterMessage(AlignmentOptions)

InferenceRequest = _reflection.GeneratedProtocolMessageType('InferenceRequest', (_message.Message,), dict(
  DESCRIPTOR = _INFERENCEREQUEST,
  __module__ = 'inference.inference_pb2'
  # @@protoc_insertion_point(class_scope:ffn.InferenceRequest)
  ))
_sym_db.RegisterMessage(InferenceRequest)

ResegmentationPoint = _reflection.GeneratedProtocolMessageType('ResegmentationPoint', (_message.Message,), dict(
  DESCRIPTOR = _RESEGMENTATIONPOINT,
  __module__ = 'inference.inference_pb2'
  # @@protoc_insertion_point(class_scope:ffn.ResegmentationPoint)
  ))
_sym_db.RegisterMessage(ResegmentationPoint)

ResegmentationRequest = _reflection.GeneratedProtocolMessageType('ResegmentationRequest', (_message.Message,), dict(
  DESCRIPTOR = _RESEGMENTATIONREQUEST,
  __module__ = 'inference.inference_pb2'
  # @@protoc_insertion_point(class_scope:ffn.ResegmentationRequest)
  ))
_sym_db.RegisterMessage(ResegmentationRequest)

CounterValue = _reflection.GeneratedProtocolMessageType('CounterValue', (_message.Message,), dict(
  DESCRIPTOR = _COUNTERVALUE,
  __module__ = 'inference.inference_pb2'
  # @@protoc_insertion_point(class_scope:ffn.CounterValue)
  ))
_sym_db.RegisterMessage(CounterValue)

TaskCounters = _reflection.GeneratedProtocolMessageType('TaskCounters', (_message.Message,), dict(
  DESCRIPTOR = _TASKCOUNTERS,
  __module__ = 'inference.inference_pb2'
  # @@protoc_insertion_point(class_scope:ffn.TaskCounters)
  ))
_sym_db.RegisterMessage(TaskCounters)


# @@protoc_insertion_point(module_scope)
